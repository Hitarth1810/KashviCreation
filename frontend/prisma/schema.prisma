generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  phone             Int       @unique
  password          String
  name              String?
  image             String?
  role              Role      @default(USER)
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetToken        String?
  resetTokenExpires DateTime?
  verifyToken       String?
  sessions          Session[]
  Blog              Blog[]
  Review            Review[]
  Cart              String[]  @default([])
  Wishlist          String[]  @default([])
  shippingAddress   Address[]
  invoices          Invoice[]
  order             Order[]

  @@map("users")
}

model Address {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  address      String
  area         String
  landmark     String
  city         String
  state        String
  pincode      String
  instructions String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDefault    Boolean   @default(false)
  user         User      @relation(fields: [userId], references: [id])
  Invoice      Invoice[]

  @@map("addresses")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  image     String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  readTime  Int
  category  String
  excerpt   String

  @@map("blogs")
}

model Product {
  id          String   @id @map("_id")
  name        String
  description String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  colors      String[]
  stock       Int
  reviews     Review[]
  category    String
  
  @@map("products")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Order {
  id        String    @id @map("_id")
  userId    String    @db.ObjectId
  products  String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    Status    @default(PENDING)
  user      User      @relation(fields: [userId], references: [id])
  Invoice   Invoice[]

  @@map("orders")
}

model Invoice {
  id         String    @id @map("_id")
  orderId    String
  customerId String    @db.ObjectId
  addressId  String    @db.ObjectId
  products   String[]
  notes      String?
  total      Float?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  billing    Address   @relation(fields: [addressId], references: [id])
  customer   User      @relation(fields: [customerId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id])

  @@map("invoices")
}

enum Status {
  PENDING
  CONFIRMED
  COMPLETE
  CANCELLED
}

enum Role {
  USER
  ADMIN
}
